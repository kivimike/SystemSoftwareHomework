# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : AppClass2.sm

import statemap


class AppClassState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def EOS(self, fsm, counter):
        self.Default(fsm)

    def header(self, fsm, counter, c):
        self.Default(fsm)

    def symb(self, fsm, c, counter):
        self.Default(fsm)

    def Default(self, fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException(msg)

class Map1_Default(AppClassState):

    def header(self, fsm, counter, c):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

    def symb(self, fsm, c, counter):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def EOS(self, fsm, counter):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

class Map1_Start(Map1_Default):

    def header(self, fsm, counter, c):
        ctxt = fsm.getOwner()
        if counter == 0 and c == "n" :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.Counter()
            finally:
                fsm.setState(endState)
        elif counter == 1 and c == "f" :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.Counter()
            finally:
                fsm.setState(endState)
        elif counter == 2 and c == "s" :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.Counter()
            finally:
                fsm.setState(endState)
        elif counter == 3 and c == ":" :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.Counter()
            finally:
                fsm.setState(endState)
        elif counter == 4 and c == "/" :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.Counter()
            finally:
                fsm.setState(endState)
        elif counter == 5 and c == "/" :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.ResetCounter()
            finally:
                fsm.setState(Map1.Serv_name)
                fsm.getState().Entry(fsm)
        else:
            Map1_Default.header(self, fsm, counter, c)
        
class Map1_Serv_name(Map1_Default):

    def symb(self, fsm, c, counter):
        ctxt = fsm.getOwner()
        if (c >= "a" and c<="z") or (c >= "A" and c<="Z") and counter <= 15 :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.Counter()
            finally:
                fsm.setState(endState)
        elif c == "/" :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.ResetCounter()
            finally:
                fsm.setState(Map1.Cat_name)
                fsm.getState().Entry(fsm)
        else:
            Map1_Default.symb(self, fsm, c, counter)
        
class Map1_Cat_name(Map1_Default):

    def EOS(self, fsm, counter):
        ctxt = fsm.getOwner()
        if counter <= 12 :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.Acceptable()
                ctxt.Save_name()
            finally:
                fsm.setState(Map1.OK)
                fsm.getState().Entry(fsm)
        else:
            Map1_Default.EOS(self, fsm, counter)
        
    def symb(self, fsm, c, counter):
        ctxt = fsm.getOwner()
        if ((c >= "a" and c<="z") or (c >= "A" and c<="Z") or c == "_" or c == ".") and counter <= 20 :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.Counter()
            finally:
                fsm.setState(endState)
        elif c == "/" :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.ResetCounter()
            finally:
                fsm.setState(Map1.File_name)
                fsm.getState().Entry(fsm)
        elif c == '\n' and counter <= 12 :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.Acceptable()
                ctxt.Save_name()
            finally:
                fsm.setState(Map1.OK)
                fsm.getState().Entry(fsm)
        else:
            Map1_Default.symb(self, fsm, c, counter)
        
class Map1_File_name(Map1_Default):

    def EOS(self, fsm, counter):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Acceptable()
            ctxt.Save_name()
        finally:
            fsm.setState(Map1.OK)
            fsm.getState().Entry(fsm)

    def symb(self, fsm, c, counter):
        ctxt = fsm.getOwner()
        if ((c >= "a" and c<="z") or (c >= "A" and c<="Z") or c == "_" or c == ".") and counter <= 12 :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.Counter()
            finally:
                fsm.setState(endState)
        elif c == '\n' :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.Acceptable()
                ctxt.Save_name()
            finally:
                fsm.setState(Map1.OK)
                fsm.getState().Entry(fsm)
        else:
            Map1_Default.symb(self, fsm, c, counter)
        
class Map1_OK(Map1_Default):
    pass

class Map1_Error(Map1_Default):

    def EOS(self, fsm, counter):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(endState)

class Map1(object):

    Start = Map1_Start('Map1.Start', 0)
    Serv_name = Map1_Serv_name('Map1.Serv_name', 1)
    Cat_name = Map1_Cat_name('Map1.Cat_name', 2)
    File_name = Map1_File_name('Map1.File_name', 3)
    OK = Map1_OK('Map1.OK', 4)
    Error = Map1_Error('Map1.Error', 5)
    Default = Map1_Default('Map1.Default', -1)

class AppClass_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, Map1.Start)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
